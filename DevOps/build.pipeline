@Library('myShareLibrary@master') _

pipeline{
    agent any
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    } 

    
    
    environment {
        def envOnBuild1 = "envOnBuildValue1"
        def envOnBuild2 = "envOnBuildValue2"
  
    }

    stages{
        stage('learn groovy'){
            steps{  
                bat 'echo "start groovy"'                       
                
            script{
                def employee = ['name':'john', 'age':26, 'phone':123123123]
                println employee         
            }    
                             
            }
        }

        stage('env test'){
            steps{                            
                bat 'set' 
                bat 'echo "followings are my own define env"'
                bat 'echo "my define variable one is ${env.envOnBuild2}"'
                bat 'echo "this is b1 on build"'

            script{
                echo "${env.envOnBuild1}"
                echo "my define variable one is ${env.testEnvVarName1}"

            }    
                             
            }
        }

        

        stage('build test'){
            steps{  
                   
                script{
                    bat 'dir'
                    println "this is a test for groovy"                    
                    mysum(12, 13)
                    echo "my current directory: ${WORKSPACE}"  
                    echo "use pwd to find current directory as following:"
                    sleep(1)
                    def a=pwd()                     
                    echo "${a}"
                    
                       }
                
            }
        }

        stage('test shared library'){
            steps{            
                script{
                    demo()                                  
                }
            }
        }

        stage('test parameters'){
            steps{            
                echo "Hello ${params.PERSON}"

                echo "Toggle: ${params.TOGGLE}"

                echo "Choice: ${params.CHOICE}"                

                echo "Password: ${params.PASSWORD}"
                echo "my job name: ${env.JOB_NAME}"
                script{
                    println 'it is under script, the name is:' + params.PERSON
                }
            }
        }

        stage('unit test'){
            steps{ 
                script{   
                 
                   print('good, unit test')
                   echo "my current directory: ${WORKSPACE}"
                   dir("${WORKSPACE}/Tests/Unit"){
                       echo "my current directory again: ${WORKSPACE}"
                    def a=pwd()                     
                    echo "${a}"
                   bat "python mySimplePyTest.py"
                   bat "pytest --version"
                   bat "python test_myunittest_example.py"
                   bat "python myPyTest.py"

                   }                
                
                }
                }        
                
            }
        }
        

    
    post {
        success {
            script {                              
                build job: 'learn_pipeline_python/Learn_Pipeline_Python_Deploy/b1',                
                    parameters: [
                        string(name: 'PERSON', value:params.PERSON),

                        booleanParam(name: 'TOGGLE', value: true),                      

                        password(name: 'PASSWORD', value: 'secret')
                        ],
                        
                        wait: false
            }
        }
    }

}
def mysum(int a, int b){
                        println(a+b)
                    }